"use client"

import { useState, useRef, useEffect } from "react"
import { motion } from "framer-motion"
import { Send, Bot, User } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"

interface Message {
  id: string
  content: string
  sender: "user" | "ai"
}

export default function ChatInterface() {
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [])

  const handleSendMessage = async () => {
    if (!input.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      sender: "user",
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    // Simulating AI response
    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: "This is a simulated AI response. In a real application, this would be generated by an AI model.",
        sender: "ai",
      }
      setMessages((prev) => [...prev, aiMessage])
      setIsLoading(false)
    }, 1000)
  }

  return (
    <div className="flex flex-col h-screen bg-green-50">
      <ScrollArea className="flex-grow p-4" ref={scrollAreaRef}>
        {messages.map((message) => (
          <motion.div
            key={message.id}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"} mb-4`}
          >
            <div className={`flex items-start max-w-3xl ${message.sender === "user" ? "flex-row-reverse" : ""}`}>
              <div
                className={`flex items-center justify-center w-8 h-8 rounded-full ${message.sender === "user" ? "bg-green-500 ml-2" : "bg-gray-300 mr-2"}`}
              >
                {message.sender === "user" ? (
                  <User size={16} className="text-white" />
                ) : (
                  <Bot size={16} className="text-gray-600" />
                )}
              </div>
              <div
                className={`p-3 rounded-lg ${message.sender === "user" ? "bg-green-500 text-white" : "bg-white text-gray-800"}`}
              >
                {message.content}
              </div>
            </div>
          </motion.div>
        ))}
        {isLoading && (
          <div className="flex justify-start mb-4">
            <div className="flex items-center bg-white p-3 rounded-lg">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
                className="w-5 h-5 border-t-2 border-green-500 border-solid rounded-full"
              />
              <span className="ml-2 text-gray-600">AI is thinking...</span>
            </div>
          </div>
        )}
      </ScrollArea>
      <div className="p-4 bg-white border-t border-green-200">
        <form
          onSubmit={(e) => {
            e.preventDefault()
            handleSendMessage()
          }}
          className="flex items-center"
        >
          <Input
            type="text"
            placeholder="Ask about PSX companies and trends..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            className="flex-grow mr-2 border-green-300 focus:ring-green-500 focus:border-green-500"
          />
          <Button type="submit" className="bg-green-500 hover:bg-green-600 text-white">
            <Send size={18} />
          </Button>
        </form>
      </div>
    </div>
  )
}

